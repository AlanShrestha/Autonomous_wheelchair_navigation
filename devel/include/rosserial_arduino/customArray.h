// Generated by gencpp from file rosserial_arduino/customArray.msg
// DO NOT EDIT!


#ifndef ROSSERIAL_ARDUINO_MESSAGE_CUSTOMARRAY_H
#define ROSSERIAL_ARDUINO_MESSAGE_CUSTOMARRAY_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace rosserial_arduino
{
template <class ContainerAllocator>
struct customArray_
{
  typedef customArray_<ContainerAllocator> Type;

  customArray_()
    : accelX(0)
    , accelY(0)
    , accelZ(0)
    , gyroX(0)
    , gyroY(0)
    , gyroZ(0)
    , compassX(0)
    , compassY(0)
    , compassZ(0)  {
    }
  customArray_(const ContainerAllocator& _alloc)
    : accelX(0)
    , accelY(0)
    , accelZ(0)
    , gyroX(0)
    , gyroY(0)
    , gyroZ(0)
    , compassX(0)
    , compassY(0)
    , compassZ(0)  {
    }



   typedef int16_t _accelX_type;
  _accelX_type accelX;

   typedef int16_t _accelY_type;
  _accelY_type accelY;

   typedef int16_t _accelZ_type;
  _accelZ_type accelZ;

   typedef int16_t _gyroX_type;
  _gyroX_type gyroX;

   typedef int16_t _gyroY_type;
  _gyroY_type gyroY;

   typedef int16_t _gyroZ_type;
  _gyroZ_type gyroZ;

   typedef int16_t _compassX_type;
  _compassX_type compassX;

   typedef int16_t _compassY_type;
  _compassY_type compassY;

   typedef int16_t _compassZ_type;
  _compassZ_type compassZ;




  typedef boost::shared_ptr< ::rosserial_arduino::customArray_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::rosserial_arduino::customArray_<ContainerAllocator> const> ConstPtr;

}; // struct customArray_

typedef ::rosserial_arduino::customArray_<std::allocator<void> > customArray;

typedef boost::shared_ptr< ::rosserial_arduino::customArray > customArrayPtr;
typedef boost::shared_ptr< ::rosserial_arduino::customArray const> customArrayConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::rosserial_arduino::customArray_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::rosserial_arduino::customArray_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace rosserial_arduino

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'rosserial_arduino': ['/home/niraj/final_wheelchair_ws/src/rosserial/rosserial_arduino/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::rosserial_arduino::customArray_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::rosserial_arduino::customArray_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::rosserial_arduino::customArray_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::rosserial_arduino::customArray_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::rosserial_arduino::customArray_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::rosserial_arduino::customArray_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::rosserial_arduino::customArray_<ContainerAllocator> >
{
  static const char* value()
  {
    return "fca8c4044d79efc956000f141ce83ec0";
  }

  static const char* value(const ::rosserial_arduino::customArray_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xfca8c4044d79efc9ULL;
  static const uint64_t static_value2 = 0x56000f141ce83ec0ULL;
};

template<class ContainerAllocator>
struct DataType< ::rosserial_arduino::customArray_<ContainerAllocator> >
{
  static const char* value()
  {
    return "rosserial_arduino/customArray";
  }

  static const char* value(const ::rosserial_arduino::customArray_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::rosserial_arduino::customArray_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int16 accelX \n\
int16 accelY\n\
int16 accelZ\n\
int16 gyroX\n\
int16 gyroY\n\
int16 gyroZ\n\
int16 compassX\n\
int16 compassY\n\
int16 compassZ\n\
";
  }

  static const char* value(const ::rosserial_arduino::customArray_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::rosserial_arduino::customArray_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.accelX);
      stream.next(m.accelY);
      stream.next(m.accelZ);
      stream.next(m.gyroX);
      stream.next(m.gyroY);
      stream.next(m.gyroZ);
      stream.next(m.compassX);
      stream.next(m.compassY);
      stream.next(m.compassZ);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER;
  }; // struct customArray_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::rosserial_arduino::customArray_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::rosserial_arduino::customArray_<ContainerAllocator>& v)
  {
    s << indent << "accelX: ";
    Printer<int16_t>::stream(s, indent + "  ", v.accelX);
    s << indent << "accelY: ";
    Printer<int16_t>::stream(s, indent + "  ", v.accelY);
    s << indent << "accelZ: ";
    Printer<int16_t>::stream(s, indent + "  ", v.accelZ);
    s << indent << "gyroX: ";
    Printer<int16_t>::stream(s, indent + "  ", v.gyroX);
    s << indent << "gyroY: ";
    Printer<int16_t>::stream(s, indent + "  ", v.gyroY);
    s << indent << "gyroZ: ";
    Printer<int16_t>::stream(s, indent + "  ", v.gyroZ);
    s << indent << "compassX: ";
    Printer<int16_t>::stream(s, indent + "  ", v.compassX);
    s << indent << "compassY: ";
    Printer<int16_t>::stream(s, indent + "  ", v.compassY);
    s << indent << "compassZ: ";
    Printer<int16_t>::stream(s, indent + "  ", v.compassZ);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ROSSERIAL_ARDUINO_MESSAGE_CUSTOMARRAY_H
