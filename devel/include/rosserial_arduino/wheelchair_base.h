// Generated by gencpp from file rosserial_arduino/wheelchair_base.msg
// DO NOT EDIT!


#ifndef ROSSERIAL_ARDUINO_MESSAGE_WHEELCHAIR_BASE_H
#define ROSSERIAL_ARDUINO_MESSAGE_WHEELCHAIR_BASE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace rosserial_arduino
{
template <class ContainerAllocator>
struct wheelchair_base_
{
  typedef wheelchair_base_<ContainerAllocator> Type;

  wheelchair_base_()
    : gyro(0.0)
    , compass(0.0)
    , lwheel(0)
    , rwheel(0)
    , usonic_1(0)
    , usonic_2(0)
    , usonic_3(0)
    , status(0)  {
    }
  wheelchair_base_(const ContainerAllocator& _alloc)
    : gyro(0.0)
    , compass(0.0)
    , lwheel(0)
    , rwheel(0)
    , usonic_1(0)
    , usonic_2(0)
    , usonic_3(0)
    , status(0)  {
    }



   typedef float _gyro_type;
  _gyro_type gyro;

   typedef float _compass_type;
  _compass_type compass;

   typedef int16_t _lwheel_type;
  _lwheel_type lwheel;

   typedef int16_t _rwheel_type;
  _rwheel_type rwheel;

   typedef int16_t _usonic_1_type;
  _usonic_1_type usonic_1;

   typedef int16_t _usonic_2_type;
  _usonic_2_type usonic_2;

   typedef int16_t _usonic_3_type;
  _usonic_3_type usonic_3;

   typedef int16_t _status_type;
  _status_type status;




  typedef boost::shared_ptr< ::rosserial_arduino::wheelchair_base_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::rosserial_arduino::wheelchair_base_<ContainerAllocator> const> ConstPtr;

}; // struct wheelchair_base_

typedef ::rosserial_arduino::wheelchair_base_<std::allocator<void> > wheelchair_base;

typedef boost::shared_ptr< ::rosserial_arduino::wheelchair_base > wheelchair_basePtr;
typedef boost::shared_ptr< ::rosserial_arduino::wheelchair_base const> wheelchair_baseConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::rosserial_arduino::wheelchair_base_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::rosserial_arduino::wheelchair_base_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace rosserial_arduino

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'rosserial_arduino': ['/home/niraj/final_wheelchair_ws/src/rosserial/rosserial_arduino/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::rosserial_arduino::wheelchair_base_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::rosserial_arduino::wheelchair_base_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::rosserial_arduino::wheelchair_base_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::rosserial_arduino::wheelchair_base_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::rosserial_arduino::wheelchair_base_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::rosserial_arduino::wheelchair_base_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::rosserial_arduino::wheelchair_base_<ContainerAllocator> >
{
  static const char* value()
  {
    return "5c5eb770ca01fbe2c81d102012013b03";
  }

  static const char* value(const ::rosserial_arduino::wheelchair_base_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x5c5eb770ca01fbe2ULL;
  static const uint64_t static_value2 = 0xc81d102012013b03ULL;
};

template<class ContainerAllocator>
struct DataType< ::rosserial_arduino::wheelchair_base_<ContainerAllocator> >
{
  static const char* value()
  {
    return "rosserial_arduino/wheelchair_base";
  }

  static const char* value(const ::rosserial_arduino::wheelchair_base_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::rosserial_arduino::wheelchair_base_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float32 gyro\n\
float32 compass\n\
int16 lwheel\n\
int16 rwheel\n\
int16 usonic_1\n\
int16 usonic_2\n\
int16 usonic_3\n\
int16 status\n\
";
  }

  static const char* value(const ::rosserial_arduino::wheelchair_base_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::rosserial_arduino::wheelchair_base_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.gyro);
      stream.next(m.compass);
      stream.next(m.lwheel);
      stream.next(m.rwheel);
      stream.next(m.usonic_1);
      stream.next(m.usonic_2);
      stream.next(m.usonic_3);
      stream.next(m.status);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER;
  }; // struct wheelchair_base_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::rosserial_arduino::wheelchair_base_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::rosserial_arduino::wheelchair_base_<ContainerAllocator>& v)
  {
    s << indent << "gyro: ";
    Printer<float>::stream(s, indent + "  ", v.gyro);
    s << indent << "compass: ";
    Printer<float>::stream(s, indent + "  ", v.compass);
    s << indent << "lwheel: ";
    Printer<int16_t>::stream(s, indent + "  ", v.lwheel);
    s << indent << "rwheel: ";
    Printer<int16_t>::stream(s, indent + "  ", v.rwheel);
    s << indent << "usonic_1: ";
    Printer<int16_t>::stream(s, indent + "  ", v.usonic_1);
    s << indent << "usonic_2: ";
    Printer<int16_t>::stream(s, indent + "  ", v.usonic_2);
    s << indent << "usonic_3: ";
    Printer<int16_t>::stream(s, indent + "  ", v.usonic_3);
    s << indent << "status: ";
    Printer<int16_t>::stream(s, indent + "  ", v.status);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ROSSERIAL_ARDUINO_MESSAGE_WHEELCHAIR_BASE_H
